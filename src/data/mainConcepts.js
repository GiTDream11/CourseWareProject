export const mainConcepts = {
    'Error Types': ['There are three types of errors',
        'a.     Syntax: Detected by compiler. Also called compilation errors.',
        'Eg. System.out.println(“Hello World”);',
        'Missing semicolon is an example of syntax error',
        'b.     Runtime: Causes the program to abort during runtime',
        'Eg. System.out.println(10/0);',
        'As anything divided by 0 is an invalid operation, it is a runtime error.',
        'c.      Logic: Produces incorrect result during runtime due to logical error in program',
        'Eg. double cm = 100*m;',
        'A program to print metres into centimetres.'
    ],

    'Data Types': ['A variable is a memory location that can hold a data value. They are initialized using a particular data type. A data type could be char for character, int for integer, double for a floating-point number, boolean for true/false conditions, String for a group of characters, etc.',
        'A variable must be declared with a name and type before it can be assigned with a value.',
        'An identifier is a sequence of characters that consists of letters, digits, underscores and/or dollar signs. These are used as variable names',
        'They must not start with a digit and cannot be a reserved keyword such as while, for, if, true, false, and null.'
    ],

    'Selection Statements': ['Selection Statements (if, switch, conditional operator) are based on a condition.',
        'The program decides which statements to execute based on a condition.',
        'if is a keyword for checking conditions and run a certain block of code based on that condition.',
        'Example: People above the age of 18 can apply for a drivers license.',
        'if(age>=18){',
        '       System.out.println(“Can apply for license”);',
        '}',
        'These statements use conditions that are boolean expressions evaluated either true or false using relational operators that include >,<,<=,>=,==,!=.',
        '',
        'One way if Statements:',
        '',
        'Two way if Statements:',
        '',
        'One can also use a “multi way” if statement but using nested if statements, as', 
        'if(condition){',
        '}',
        'else if (condition 2){',
        '}',
        'else{',
        '}',
        '',
        'Logical Operators:',
        '&&(AND), ||(OR), !(NOT)',
        'switch is an alternative method to if where a format is followed',
        'Eg. switch(x){',
        'case 1: System.out.println(“Hi 1”);',
        'case 2: System.out.println(“Hi 2”); break;',
        'case 8: System.out.println(“Hi 3”);',
        'default: System.out.println(“Bye”); yield 3; break;',
        '};', 
        '',
        'Each case is run based on the value. Assuming x is of type int, if it has the value 2, it prints out “Hi 2”.'
        ,,
        'A default condition is used when the condition match none of the cases, which means if x has a value which is not 1, 2, or 8, it will print “Bye”.', 
        '',
        'What do you think would happen if the value of x was 8?',
        'Similar to case 1, case 8 would print both “Hi 3 Bye” as it didn’t come across a break statement.',
        '',
        'yield is keyword using in switch cases to return a value as well as act as a break statement.',
        'Eg. y = switch(x){',
        'case 1,9: System.out.println(“Hi!”); yield sum;',
        'default: System.out.println(“Bye!”); yield 3;',
        '};',
        '',
        'A conditional expression evaluates an expression based on a condition.',
        'Its syntax: boolean expression?expression1:expression2;',
        'Eg. y = (10<9)?1:-1;',
        'Since 10<9 is a false statement, the latter of the 2 statements (1,-1) will be assigned to y, which is -1.'     
    ],

    'Loops': ['Repetitive Statements (for, while, do..while) are based on a condition.',
        'There are two types of loops-',
        'a. Counter-controlled repetition',
        '   Repetition will exit after running a certain number of times.',
        'Assign a control variable that acts as a counter.',
        'This counter must be incremented or decremented to satisfy the condition to run the code of the loop.',
        'b. Sentinel- controlled repetition',
        'It is not known in advance how many times the loop will be executed.',
        '',
        'while loops-',
        'Syntax-',
        '',
        'initialize a counter;',
        'while (loop condition )',
        '       statement(s); ',
        '       increase/decrease the counter;',
        '}',
        '',
        'do...while loops-',
        'Syntax-',
        'do{',
        '      statement(s);',
        '      increase/decrease the counter;',
        '} while (loop condition);',
        '',
        'The difference between a while and a do...while is that a do...while loop executes once even if it is false.',
        'This means the loop body will run at least once. This comes in handy for menu-driven programs.',
        '',
        'for loops-',
        'Syntax-',
        'for (initial-action;loop-continuation-condition;action-after-each-iteration)',
        '{',
        '       statements(s);',
        '}',
        '',
        'Tip: Don’t use floating point values for equality checking in a loop control.',
        'Since floating point values are approximations for some values, using them could result in imprecise counter values and inaccurate results.',
        '',
        'When to use each type of loop?',
        '   i. A for loop may be used if the number of repetitions is known, as, for example, when you need to print a message 100 times.',
        '   ii. A while loop may be used if the number of repetitions is not known, as in the case of reading the numbers until the input is 0.',
        '   iii. A do...while loop can be used to replace a while loop if the loop body has to be executed before testing the continuation condition.',
        '',
        'You can use a break statement in a loop to immediately terminate the loop.'
    ],

    'Methods': ["Modularity is the degree to which a system's components may be separated and recombined, which is very useful for reusability of code.",
        'A method is a named-independent section of the code that performs a specific task and optionally returns a value to the calling program.',
        '',
        'The method header specifies the modifiers, return value type, method name, and parameters of the method.',
        '',
        'Example:',
        'Method definition',
        'public static int returnSum(int x, int y){ return x+y; }',
        'Calling method in the main-',
        'Int sum = returnSum(3,9);',
        '',
        'The name of the function is called returnSum.',
        'The modifiers of the function are public and static.',
        'The two parameters in the function are x and y whose values are passed from the calling function.',
        'The return type of the function is int which means it returns an int value to the calling function.',
        '',
        'Actual parameters are the values that are passed from the calling method to the method definition. In the above example, the actual parameters are 3 and 9.',
        '',
        'Formal parameters are the variables defined in the method definition header, using which all method statements use. In the above example, the actual parameters are x and y.',
        '',
        'The method name and the parameter list together constitute the method signature.',
        '',
        "Method Overloading - define several methods with the same name as long as their signatures are different. Java always calls the most specific method",
        '',
        'Ambiguous Invocation occurs when there are two or more possible matches for the invocation of a method, but the compiler cannot determine the best match. Ambiguous invocation causes a compile error.',
        'For example:',
        'The scope of the variable is the part of the program that the variable can be referenced.',
        '',
        'Call Stacks- Each time a method is invoked, the system creates an activation record that stores parameters and variables for the method and places the activation record in an area of memory known as a call stack',
        'When writing a large program, you can use the “ divide and conquer ” strategy, also known as stepwise refinement , to decompose it into subproblems',
        'The subproblems can be further decomposed into smaller, more manageable problems.'
    ],

    'Arrays': ['Array is a data structure that represents a collection of the same data type. ',
    '',
    'a. Declaring the variable to reference the array:',
    'int[] list;',
    'This just creates the pointer, there is no object yet.',
    '',
    'b. Create the list:',
    'list = new int[8];',
    'This refers to an eight element array object.',
    '',
    'Default values: When an array is created, its elements are assigned the default value of 0 for the numeric primitive data types, \u0000 for char types, and false for boolean types.',
    '',
    'Array list reference numbers start with 0 and go till (n-1). Hence, list[0] refers to the first element, list[1] refers to the seconds element, and so on.',
    '',
    'You could declare and create an array in one step:',
    'int[] list = new int[8];',
    '',
    'You could declare, create and initialize an array in one step:',
    'int[] list = {1,2,5,3,7,3,7,4,3};',
    'This is a shorthand notation for list[1]=9; for each element.',
    'However, this shorthand notation cannot be used in two steps.',
    '',
    'for-each loops enable you to traverse the complete array sequentially without using an index variable.',
    'Syntax-',
    'for (elementType variable_name: arrayRefVar) {',
    '    // Access the array',
    '}',
    'Ex. code to display all elements in myarray:',
    'for (int item: myarray)',
    'System.out.println(item);',
    '',
    'The java.util.Arrays class contains useful methods for common array operations.',
    'void sort(list) - sorts the array in ascending order by default.',
    'int binarySearch(list, val) - searches for a value in the array',
    'String toString(list) - returns string representation of the contents of array',
    'Boolean equals(list1,list2) -  checks if two arrays are the strictly equal',
    '',
    'An array can have several dimensions. We can make a table representation using a two dimensional array. ',
    'Ex. int[][] twoDarray = new int [3][3];',
    '',
    'A ragged array is the one in which the rows can have different lengths. Each row in a two dimensional array is itself an array.',

    ],
    'Object Oriented Programming' : [
        'Object-Oriented Programming is a programming concept that works on the principles of abstraction, encapsulation, inheritance, and polymorphism. It allows users to create objects they want and create methods to handle those objects.',
        'An object can hold attributes as well as perform actions.',
        'A class behaves as a template of a group of objects of the same type.',
        '',
        'Constructors play the role of initializing objects. They are a special kind of method that do not have a return type, must have the same name as the class, can be overloaded, and are invoked using the new operator when an object is created.',
        '',
        'A default constructor is provided automatically only if no constructors are explicitly defined in the class. These values are default values of 0, null and false.',
        '',
        'UML - Unified Modeling Language',
        'They are a method for representing and communicating a model of the software being developed.',
        '',        
        'Advantages of OOP-',
        'Modularization',
        'Big problem into smaller subproblems',
        'Improves understandability',
        'Encapsulation and Reuse',
        'Hide complexity and protect low level functionality',
        'Reuse code in other programs',
        'Understandability (Composability (big objects are built off smaller ones)',
        'Maintenance',
        'Easier to change code of individual modules',
        '',
        'Access Modifiers control the levels of access to class members in java. They are mainly private and public. Public means it can be used to any class, private means that it can be used by only that particular class and its methods.',
        '',
        'this is used inside a method or a constructor to refer to the current object, whose method/constructor is being called. It is used to avoid conflicts in methods of its object.',
        '',
        'static class members:',
        'static variables ( also known as class variables ) are shared by all the instances (objects) of the class.',
        'static methods ( also known as class methods ) are not tied to a specific object (they carry out a general function)'
    ],

    'Inheritance': [
        'Inheritance is a mechanism for enhancing and extending, existing working classes created by the user.',
        '',
        'The keyword extends is used to inherit a class.',
        '   Syntax: class subclass extends superclass{}',  
        '',
        'Main reason: reuse-ability of code.',
        'You can inherit class members(methods and properties) as well as add new ones.',
        'Overriding allows a subclass to modify the behavior of an inherited method as needed.',
        'Overriding happens when you implement a method in a subclass that has the same signature and return type.',
        '',
        'The keyword super refers to the superclass of the class in which super appears.',
        '',
        'Constructor chaining is a process of constructing an instance of a class invokes all the superclasses’ constructors along the inheritance chain.',
        '',
        'final keyword:',
        'A final local variable is a constant inside a method.',
        'A final class cannot be extended:',
        'A final method cannot be overridden by its subclasses.',
        '',
        'Access modifiers are used for controlling levels of access to class members in Java.',
        '',
        'A subclass may override a protected method in its superclass and change its visibility to public. However, a subclass cannot weaken the accessibility of a method defined in the superclass.',
        '',
        'java.lang.Object- ',
        'public String toString() - this returns a string representation of the object.',
        'public boolean equals(Object obj) - this indicates whether some other object is "equal to" this one',
    ],

    'Polymorphism': [
        'Polymorphism is the ability of an object to perform a single task using different forms.',
        '',
        'In Java, a reference variable of a supertype can refer to any of its subtype objects.',
        'Every instance of a subclass is also an instance of its superclass, but not vice versa.',
        '',
        'Three Rules of Polymorphism:',
        'Rule 1: A reference of a supertype can be used to refer to an object of a subtype.(not vice versa).',
        'Rule 2: You can only access class members known to the reference variable',
        'Rule 3: When invoking a method using a reference variable x, the method in the object referenced by x is executed, regardless of the type of x.',
        '',
        'Dynamic binding is used for overridden methods and happens during the runtime. Here, Java tries to bind the method call to a method definition up a class inheritance hierarchy.',
        '',
        'Static Binding: In case of method overloading, the compiler finds a matching method according method signature at compilation time.',
        '',
        'Uses of Polymorphism:',
        'Generic Programming',
        'Storing data of different but related data types.',
        '',
        'The instanceof operator to test whether an object is an instance of a class. Eg. -',
        '   if(Apple instanceof Fruit)',
        '   System.out.print ("True”);',
        '   else',
        '   System.out.print ("False”);',
    ],

    'Abstract Classes and Inheritance': [
        'Abstract classes are usually used to define common features to their subclasses for different implementations.',
        '',
        'Syntax- abstract class className{}',
        '',
        'Abstract methods have a header but no body.',
        '',
        'Concrete classes are classes that are not abstract. They cannot contain abstract methods.',
        '',
        'An interface is a class-like construct that contains constants methods: abstract , default , or static. It defines common behavior for classes and provides default implementation of some of that behavior.',
        '',
        'default methods provide default implementation in an interface for backward compatibility.',
        'The Comparable interface is a generic interface that contains a method compareTo() which measures the values of the class rather than the memory location.',
        '',
        "The Cloneable interface is a marker interface that has a method clone() that returns the type <Object> which should be casted according to the user's needs. The exception CloneNotSupportedException will be thrown if Cloneable is not implemented. There are two types, Shallow and Deep copy.",
    ],

    'Exception Handling': [
        'An exception is an object that represents an error or a condition that prevents execution from proceeding normally.',  
        '',
        'In Java, Exception Handling enables a program to deal with exceptional situations and continue with its execution. If we don’t handle these exceptions, then the program terminates.',
        '',
        'The methods include Defensive Programming and try.. catch mechanism. ',
        '',
        'Unchecked Exceptions- They occur usually because of logical error.',
        'Checked Exceptions- They are all exceptions under Exception class except RuntimeException.'
    ],
    
    'Input/Output': [
        'Stream: a sequence of bytes, representing a flow of data from a source to a destination',
        '',
        'Any Read or Write is performed in 3 steps',
        '   1.  Define an object of a class used to read or write from a stream',
        '   2.  Read or Write using the methods of the defined object',
        '   3. Close the stream',
        '',
        'Scanner Class:',
        '   Methods:',
        '       next() : Returns next “token”',
        '       nextLine(): Returns an entire input line as a string',
        '		nextInt(): Returns next integer value',
        '		nextDouble(): Returns next double value',
        '       nextXYZ(): Returns value of type XYZ (primitive value if possible where XYZ is one of BigDecimal, BigInteger, Boolean,Byte, Float or Short',
        '       useDelimiter(pattern: String): set this scanner’s delimiting pattern and returns this scanner, when reading a token using next(), the token is identified by the scanner delimiter, the default delimiter is space " ".',
        '',
        '   Test Methods:',
        '       hasNext(): true if another token is available to read',
        '       hasNexLine(): true if another line is available to read',
        '       hasNextInt(): true if another int is available to read',
        '       hasNextDouble(): true if another double is available to read',
        '       hasNextXYZt(): XYZ stand for an input type',
        '',
        'PrintWriter Class:',
            '1. Create a File object that point to the text file',
            '2. Create a PrintWriter object using the file object as destination',
            '3. Use the Printwriter object to write text',
            '4. Close the PrintWriter',
            
            'Methods:',
                    'print() , println() , printf()',
        '',
        'Try- with-resources',
        '		try (declare and create resources) {',
        '			Use the resource to process the file;',
        '		}',
        'Try with resources syntax automatically closes the stream.',
        '',
                
        'Serializable Interface:',
        'For an object to be written to a stream it must be serializable[it must implement the serializable interface]',
        'The serializable interface is a marker interface, it has no methods, so no additional code needs to be added to a class that implements Serializable',
        'Implementing this interface allows the Java serialization mechanism to automate the process of storing the objects and arrays'
    ],
    
    'Recursion': [
        'A recursive method is a method which calls itself either directly or indirectly',
        '',
        'Stopping Point / Base Case:',
        'Similar to the condition evaluated in a for loop',
        '	for(int i = 0; i < 10; i++)',
        'A recursive method must have a stopping point to end the recursion',
    ],

    'Data Structures': [
        'Capacity: maximum number of items an arraylist can hold without being extended',
        'Size: current number of items stored in an arraylist',
        '',
        'ArrayList object:',
            'Used to store a list of objects (similarly to an array)',
            'Capacity can dynamically grow during runtime',
            'Internally implemented using an array',
            'Uses an index to reference elements',
        '',
        'ArrayList Vs Array:',
            'ArrayList can automatically increase in capacity',
            'ArrayList has many more methods',
            '	Eg. inserting to/removing from anywhere in the list',
        '', 
        'ArrayList is not the most efficient use of memory',
        '',
        'Declaring an ArrayList;',
            'ArrayList<String> list1 = new ArrayList<String>();',
            'ArrayList<Date> list2 = new ArrayList<Date>();',
            'In General:',
            'ArrayList<Type>  arrayList = new ArrayList<>();',
            
        'Type can be omitted from constructor as the compiler can infer the type from the variable declaration',
        '',	
        'ArrayList Methods: image',
        '',		
        'List, Stacks and Queues and LinkedLists',
        '',
        'Data Structure:	An organized collection of data',
        'Java Collections Framework: A framework including several data structures for storing and managing data(objects of any type)',
        'Collection: Stores elements,eg. Sets, Lists, Stacks, Queues, Priority Queues',
        'Set: A collection of elements with no duplicates',
        'List: An ordered collection of elements',
        'Stack: A Last In First Out (LIFO) ordered collection of elements',
        'Queue: A First In First Out (FIFO) ordered collection of elements',
        'Priority Queue: A queue which prioritizes certain elements (moves them to the head of the queue)',
        'Map: A collection of elements stored using key/value pairs',	
        'Collections Interface: The root interface for manipulating a collection of objects',
        '',
        'Linked List: Each element is contained in an object called a node',
        'New elements have a node created to contain them when they are added to the list',
        'Each node points to its next neighbor node',
        'Head variable points to the first node',
        'Tail variable points to the last node',
        'If the list is empty than both the head and tail are empty',
        '',
        'Doubly Linked List: Same as a Linked list but each node point to both its next and previous neighbor'
    ],
        
    'Sorting Algorithms' : [
        'Big-Oh Notation: A notation used to indicate the growth rate of a function(efficiency) as the size of the data input to the algorithm grows',
        '',
        'The performance of the algorithm is expressed as a function of n where n is the size of the problem/input/data',
        'Only the most significant/largest expression is included   ',                 
        '   eg. n2 + n is O(n2)',
        'Constants are ignored eg 3n is O(n)',
    ]
}